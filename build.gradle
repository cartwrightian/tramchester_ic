
plugins {
    id 'com.mgd.core.gradle.s3' version '2.2.0'
    id 'io.mateo.cxf-codegen' version '2.4.1'
    id 'java'
    id 'application'
    id 'idea'
    id 'com.gradleup.shadow' version '8.3.8'
}

idea{
    module{
        inheritOutputDirs = true
    }
}


import com.mgd.core.gradle.S3Upload
import io.mateo.cxf.codegen.wsdl2java.Wsdl2Java

mainClassName = 'com.tramchester.App'

def candidate = System.getenv("CIRCLE_BUILD_NUM") ?: "0"
// override build number if RELEASE_NUMBER set, needed because of way circle ci workflows operate, see also
// .circleci/config.yml
def buildNumber = System.getenv("RELEASE_NUMBER") ?: candidate
def environment = System.getenv("ENV") ?: "Dev"
def isWindows = System.getProperty('os.name').toLowerCase(Locale.ROOT).contains('windows')

// NOTE: TestEnv also depends on the environment
// this profiling set upis only useful when doing full profiling, not sampling, in visualvm
def visualVMPath = System.getenv("VISUAL_VM")
def agentPath = "-agentpath:$visualVMPath/visualvm/lib/deployed/jdk16/mac/libprofilerinterface.jnilib=$visualVMPath/visualvm/lib,5140"

def s3prefix = 'dist/' + buildNumber
def prodConfig = 'config/local.yml'
def railCodeGenOutput = 'main/src/generated-live-rail-api/'
def railLiveDataWSDL = 'config/OpenLDBWS.wsdl'

s3 {
    bucket = 'tramchesternewdist'
}

// this is used in the generated dist zip filename
version = buildNumber

ext {
    dropwizardVersion = '4.0.14'
    jacksonVersion = '2.19.2'
    awsSdkVersion = '2.34.4'
    allureVersion = '2.29.1'
    //allure.results.directory=build/reports/allure
}

repositories {
    maven {
        url "https://repo.osgeo.org/repository/release/"
    }
    mavenCentral()
    maven {
        url "https://raw.github.com/neo4j-contrib/m2/master/releases"
    }
}


// useful reminder ./gradlew -q dependencyInsight --dependency X.Y:Z
dependencies {

    implementation("io.dropwizard:dropwizard-core:$dropwizardVersion")
    // slf4j in governator was causing race condition with dropwizard start up code on initial get of logger
    implementation('com.netflix.governator:governator:1.17.13') {
        exclude group: 'org.slf4j', module: 'slf4j-api'
    }
    implementation 'com.google.inject:guice:7.0.0'
    // note: exclude of org.glassfish.jersey.inject needed as it clashed with version in DropWizard causing a
    // failure to load the DynamicServiceLocator in glassfish
    implementation('org.neo4j:neo4j:5.26.9') {
        // seem to cause issue with logging on every release, sigh
        exclude group: 'org.neo4j', module:'neo4j-slf4j-provider'
        exclude group: 'org.glassfish.jersey.inject'
        exclude group: 'org.glassfish.jersey.containers', module: 'jersey-container-servlet'
        exclude group: 'org.eclipse.jetty' }
    implementation 'com.github.cliftonlabs:json-simple:4.0.1',
            'commons-io:commons-io:2.20.0',
            'commons-codec:commons-codec:1.18.0',
            'org.apache.commons:commons-collections4:4.5.0',
            'org.apache.commons:commons-compress:1.27.1',
            'com.github.ben-manes.caffeine:caffeine:3.2.2'
    implementation "com.fasterxml.jackson.core:jackson-core:$jacksonVersion",
            "com.fasterxml.jackson.core:jackson-databind:$jacksonVersion",
            "com.fasterxml.jackson.module:jackson-module-afterburner:$jacksonVersion",
            "com.fasterxml.jackson.module:jackson-module-blackbird:$jacksonVersion",
            "com.fasterxml.jackson.dataformat:jackson-dataformat-csv:$jacksonVersion",
            "com.fasterxml.jackson.dataformat:jackson-dataformat-xml:$jacksonVersion"
    implementation('com.smoketurner:dropwizard-swagger:4.0.5-1') {
        exclude group: 'org.glassfish.jersey.containers', module: 'jersey-container-servlet-core'
        exclude group: 'org.glassfish.jersey.core', module: 'jersey-server'
        exclude group: 'org.glassfish.jersey.core', module: 'jersey-common'
    }
    implementation 'org.reflections:reflections:0.10.2'

    // aws sdk
    implementation("software.amazon.awssdk:s3:$awsSdkVersion")
    implementation("software.amazon.awssdk:cloudwatch:$awsSdkVersion")
    implementation("software.amazon.awssdk:cloudformation:$awsSdkVersion")
    implementation("software.amazon.awssdk:sns:$awsSdkVersion")
    implementation("software.amazon.awssdk:sqs:$awsSdkVersion")

    // todo replace with jakarta version, but used by governator and cxf code gen
    implementation 'javax.annotation:javax.annotation-api:1.3.2'

    implementation  'org.jetbrains:annotations:26.0.2'

    // note multiple incompatible forks of geotools see repo specified above and
    // https://repo.osgeo.org/#browse/browse:release:org%2Fgeotools%2Fgt-main
    // gt-epsg-hsql: hsql backed slow, gt-epsg-wkt property file backed faster (well ought to be...)
    implementation('org.geotools:gt-main:33.2', 'org.geotools:gt-epsg-wkt:33.2')

    implementation('javax.measure:unit-api:2.2')

    implementation('org.roaringbitmap:RoaringBitmap:1.3.0')

    testImplementation("io.dropwizard:dropwizard-testing:$dropwizardVersion")
    testImplementation 'org.junit.jupiter:junit-jupiter:5.13.3',
            'org.junit.platform:junit-platform-launcher:1.13.3',
            'org.easymock:easymock:5.6.0',
            'org.seleniumhq.selenium:selenium-java:4.34.0',
            'org.hamcrest:hamcrest:3.0'

    testImplementation("org.javassist:javassist:3.30.2-GA")
    testImplementation 'com.tngtech.archunit:archunit-junit5:1.4.1'

    // cxf complains about missing conduit without this
    cxfCodegen 'org.apache.cxf:cxf-rt-transports-http:4.1.2'
    // needed for cxf gen'ed code, missing from cxfCodegen dependencies?
    implementation 'jakarta.xml.ws:jakarta.xml.ws-api:4.0.2'
    // for running the cxf generated code,  provide implementation of the SPI jakarta.xml.ws.spi.Provider
    implementation 'com.sun.xml.ws:jaxws-rt:4.0.3'

    // allure test reports
    testImplementation(platform("io.qameta.allure:allure-bom:$allureVersion"))
    testImplementation("io.qameta.allure:allure-junit5")

    // TODO Still needed? Workaround for issues running tests in intellij and glassfish DI, does not occur with running via gradle
    //testRuntimeOnly 'javax.servlet:javax.servlet-api:3.0.1'

    // NOTE: get resources files generated by webpack into path for intellij at test time, but this workaround is not working
    //testRuntimeOnly files('build/resources/main/app') // build/resources/main/app => index.html (found)
    //testRuntimeOnly fileTree(dir: 'build/resources/main/', include: '*.*')
}

sourceSets {
    main {
        java {
            srcDirs = ['main/src']
        }
        resources {
            srcDirs = ['config']
        }
    }
    test {
        java {
            srcDirs = ['main/test']
        }
        resources {
            srcDirs = ['main/test/resources']
        }
    }
}

cxfCodegen {
    cxfVersion = "4.0.4"
}

// todo need way to cache wsdl or results for when offline?
tasks.register("railLiveDataCodeGen", Wsdl2Java) {
    toolOptions {
        wsdl.set(file(railLiveDataWSDL).toPath().toAbsolutePath().toString())
        outputDir.set(file(railCodeGenOutput))
        markGenerated.set(true)
        extendedSoapHeaders.set(true)
    }
}

tasks.register('npmInstall', Exec) {
    inputs.file("package.json")
    inputs.file("package-lock.json")
    outputs.dir("node_modules")

    if (isWindows) {
        commandLine "npm.cmd", "install"
    } else {
        commandLine "npm", "install"
    }
}

tasks.register('webpack', Exec) {
    dependsOn 'npmInstall'
    inputs.file("package.json")
    inputs.file("package-lock.json")
    inputs.file("webpack.config.js")
    inputs.files(fileTree("main/src/resources/app"))

    if (isWindows) {
        commandLine './node_modules/.bin/webpack.cmd', '--env', 'environment='+environment
    } else {
        commandLine './node_modules/.bin/webpack',  '--env', 'environment='+environment
    }
}

// todo is this correct see next task
applicationDistribution.exclude('**/app/')

// TODO this does not seem  the right way to do this
jar {
    dependsOn 'webpack'
    from('build/resources/main') {
        duplicatesStrategy duplicatesStrategy.INCLUDE
        exclude '**.yml'
    }
    manifest {
        attributes 'Main-Class': 'com.tramchester.App'
    }
}

distributions {
    main {
        contents {
            into ('config') {
                from 'config'
            }
            into ('bin') {
                from 'deploy/start.sh'
            }
        }
    }
}

// WIP removed, problem with runtime classpath for the apache tool that only happened with circleci build env
compileJava.dependsOn 'railLiveDataCodeGen'

tasks.register('cfnassist') {
    doLast {
        ant.taskdef(name: 'cfnassist', classname: 'tw.com.ant.CfnAssistAntTask') {
            classpath {
                fileset(dir: 'lib/cfnassist-1.3.210/lib/', includes: '*.jar')
                dirset(dir: 'lib/cfnassist-1.3.210/conf/')
            }
        }
    }
}

tasks.withType(JavaCompile).configureEach {
    options.deprecation = true
    options.compilerArgs.addAll(['-Xlint'])
}

tasks.register('cleanGraph') {
    fileTree('databases').
            include ('**/*.db').
            visit { FileVisitDetails  details -> delete details.file }
}

tasks.register('cleanRailCode') {
    delete fileTree(railCodeGenOutput) {
        include '**.*'
    }
    delete railCodeGenOutput
}

//// TODO Sort this out!
clean {
    dependsOn 'cleanGraph', 'cleanRailCode'
    delete fileTree('data/tram') {
        include '*.txt'
        include '*.zip'
        include '*.csv'
    }

    delete fileTree('data/bus') {
        include '*.txt'
        include '*.zip'
        include '*.csv'
    }
    delete fileTree('data/rail') {
        include '*.*'
    }
    delete fileTree('data/naptan') {
        include '*.xml'
        include '*.zip'
    }
    delete fileTree('data/nptg') {
        include '*.csv'
        include '*.zip'
    }
    delete fileTree('data/postcodes') {
        include '**/*.csv'
    }
    delete('data/postcodes')
    delete('testData/cache')
}

run {
    // see deploy/setupTramWebServerAWSLinux.sh
    //maxHeapSize = '900m'
    dependsOn 'webpack'
    args 'server', prodConfig
}

test {
    useJUnitPlatform()
}

tasks.register('buses', JavaExec) {
    dependsOn 'webpack'
    mainClass = mainClassName
    classpath = sourceSets.main.runtimeClasspath
//    maxHeapSize = "3g"
    args 'server', 'config/buses.yml'
}

tasks.register('frequency', JavaExec) {
    dependsOn 'webpack'
    mainClass = mainClassName
    classpath = sourceSets.main.runtimeClasspath
    maxHeapSize = "3g"
    args 'server', 'config/frequency.yml'
}

tasks.register('rail', JavaExec) {
    dependsOn 'webpack'
    mainClass = mainClassName
    classpath = sourceSets.main.runtimeClasspath
    maxHeapSize = "4g"
    args 'server', 'config/rail.yml'
}

tasks.register('gm', JavaExec) {
    dependsOn 'webpack'
    mainClass = mainClassName
    classpath = sourceSets.main.runtimeClasspath
    maxHeapSize = "2g"
    args 'server', 'config/gm.yml'
}

tasks.register('all', JavaExec) {
    dependsOn 'webpack'
    mainClass = mainClassName
    classpath = sourceSets.main.runtimeClasspath
    maxHeapSize = "3g"
    args 'server', 'config/all.yml'
}

tasks.register('unit', Test) {
    dependsOn 'compileJava'
    useJUnitPlatform()
    filter {
        includeTestsMatching "com.tramchester.unit.*"
    }
    testLogging {
        events("failed")
        exceptionFormat = "full" // default is "short"
    }
}

tasks.register('liveMessages', Test) {
    dependsOn 'compileJava'
    useJUnitPlatform {
        includeTags "liveDataMessages"
        includeTags "liveData"
        excludeTags "LiveDataS3UploadTest"
    }
    filter {
        includeTestsMatching "com.tramchester.integration.*"
    }
    testLogging {
        events("failed")
        exceptionFormat = "full" // default is "short"
    }
}

def integrationTestConfiguration = {
    minHeapSize = "1000m"
    maxHeapSize = "1750m"
    useJUnitPlatform {
        //         excludeTags "dataExpiry" // can be useful to exclude when big changes to timetable are upcoming
//        excludeTags "liveDataMessages" // exclude these when tfgm api is missing messages
//        excludeTags 'liveDataDueTrams' // exclude these when tfgm api is missing due trams
//         excludeTags "liveDataInfra" // exclude tests that rely on the tfgm api being available,
//         will also need to exclude all other live data tests
        excludeTags "postcode" // not needed for tram, but used by buses
        excludeTags "BusTest"
        excludeTags "TramBusTest"
        excludeTags "TrainTest"
        excludeTags "GMTest"
        excludeTags "LiveDataS3UploadTest" // currently disabled
        excludeTags "AWSMetricsTest" // currently disabled
    }
    filter {
        includeTestsMatching "com.tramchester.integration.*"
    }
    testLogging {
        events("failed")
        exceptionFormat = "full" // default is "short"
    }
}

def integrationRailConfig = {
    minHeapSize = "1000m"
    maxHeapSize = "8000m"
//    useJUnitPlatform {
//        includeTags "TrainTest"
//    }
    systemProperty("com.tramchester.config", "IntegrationRailTestConfig")
    filter {
        includeTestsMatching "com.tramchester.integration.*"
    }
    testLogging {
        events("failed")
        exceptionFormat = "full" // default is "short"
    }
}

tasks.register('integration', Test) {
    dependsOn 'compileJava'
    outputs.upToDateWhen { false }
    configure integrationTestConfiguration
}

tasks.register('busTest', Test) {
    dependsOn 'compileJava'
    useJUnitPlatform {
        includeTags 'BusTest'
    }
    maxHeapSize = "3g"
    testLogging {
        events("failed")
        exceptionFormat = "full" // default is "short"
    }
}

tasks.register('unitInMem', Test) {
    dependsOn 'compileJava'
    useJUnitPlatform {
        includeTags "MultiDB"
    }
    filter {
        includeTestsMatching "com.tramchester.unit.*"
    }
    systemProperty("com.tramchester.dbType", "InMemory")
    testLogging {
        events("failed")
        exceptionFormat = "full" // default is "short"
    }
}

tasks.register('integrationGM', Test) {
    dependsOn 'compileJava'
    minHeapSize = "1g"
    maxHeapSize = "3g"
    useJUnitPlatform {
        includeTags "GMTest"
        includeTags "dataExpiry"
        includeTags "DualTest"
    }
    filter {
        includeTestsMatching "com.tramchester.integration.*"
    }
    systemProperty("com.tramchester.config", "RailAndTramGreaterManchesterConfig")
    testLogging {
        events("failed")
        exceptionFormat = "full" // default is "short"
    }
}

tasks.register('dataUpdated', Test) {
    configure integrationTestConfiguration
    outputs.upToDateWhen { false }
    useJUnitPlatform {
        includeTags 'DataUpdateTest'
    }
}

tasks.register('liveRailSmoke', Test) {
    configure integrationRailConfig
    outputs.upToDateWhen { false }
    useJUnitPlatform {
        includeTags 'TrainTest & TrainLiveData'
    }
}

tasks.register('s3Test', Test) {
    dependsOn 'compileJava'
    useJUnitPlatform {
        includeTags "S3Test"
        excludeTags "LiveDataS3UploadTest"
    }
    testLogging {
        exceptionFormat "full" // default is "short"
        events "passed", "failed", "standardError"
    }
}

tasks.register('integrationBus', Test) {
    dependsOn 'compileJava'
    minHeapSize = "1000m"
    maxHeapSize = "3000m"
    useJUnitPlatform {
        includeTags "BusTest"
        //includeTags "postcode"
    }
    filter {
        includeTestsMatching "com.tramchester.integration.*"
    }
    testLogging {
        events("failed")
        exceptionFormat = "full" // default is "short"
    }
}

tasks.register('integrationRail', Test) {
    configure integrationRailConfig
    useJUnitPlatform {
        includeTags "TrainTest"
    }
}

tasks.register('graphTests', Test) {
    dependsOn 'compileJava'
    minHeapSize = "1000m"
    maxHeapSize = "1750m"
    useJUnitPlatform()
    filter {
        includeTestsMatching "com.tramchester.integration.graph.*"
    }
    testLogging {
        events("failed")
        exceptionFormat = "full" // default is "short"
    }
}

tasks.register('buildGraphTest', Test) {
    dependsOn 'compileJava'
    minHeapSize = "1000m"
    maxHeapSize = "1750m"
    useJUnitPlatform()
    filter {
        includeTestsMatching "com.tramchester.integration.graph.GraphBuildAndStartTest"
    }
    testLogging {
        events("failed")
        exceptionFormat = "full" // default is "short"
    }
}

def acceptanceTestConfiguration = {
    dependsOn 'compileJava'
    dependsOn 'webpack'
    systemProperty("user.language", "en")
    systemProperty("user.country", "GB")
    useJUnitPlatform()
    filter {
        includeTestsMatching "com.tramchester.acceptance.*"
    }
    testLogging {
        events("failed")
        exceptionFormat = "full" // default is "short"
    }
}

tasks.register('acceptance', Test) {
//    dependsOn 'allowhost'
    configure acceptanceTestConfiguration
//    finalizedBy {
//        blockhost
//    }
}

tasks.register('localAcceptance', Test) {
    minHeapSize = "1000m"
    maxHeapSize = "1750m"
    configure acceptanceTestConfiguration
}

// fast feedback on whether acceptance tests run etc
tasks.register('smokeTest', Test) {
    configure acceptanceTestConfiguration
    useJUnitPlatform {
        includeTags "SmokeTest"
    }
}

// aid with debuggin locale issue quickly
tasks.register('localeTest', Test) {
    configure acceptanceTestConfiguration
    useJUnitPlatform {
        includeTags "LocaleTest"
    }
}

tasks.register('diagrams') {
    dependsOn 'cfnassist'
    doLast {
        ant.cfnassist() {
            Diagrams(target: '.')
        }
    }
}

// todo gm here so include both sets of data
tasks.register('pullData', JavaExec) {
    dependsOn 'classes'
    mainClass = 'com.tramchester.deployment.cli.FetchDataCLI'
    classpath = sourceSets.main.runtimeClasspath
    args prodConfig
}

tasks.register('pullOpenRailData', JavaExec) {
    dependsOn 'classes'
    mainClass = 'com.tramchester.deployment.cli.FetchDataCLI'
    classpath = sourceSets.main.runtimeClasspath
    args 'config/rail.yml'
}

tasks.register('publishLiveData', JavaExec) {
    dependsOn 'classes'
    mainClass = 'com.tramchester.deployment.cli.PublishLiveDataToSNSCLI'
    classpath = sourceSets.main.runtimeClasspath
    args 'config/local.yml', '100'
}

tasks.register('monitorLiveTramData', JavaExec) {
    dependsOn 'classes'
    mainClass = 'com.tramchester.deployment.cli.MonitorTramLiveData'
    classpath = sourceSets.main.runtimeClasspath
    args 'config/local.yml', '2'
}

def performanceTestConfig = {
    dependsOn 'classes'
    mainClass = 'com.tramchester.testSupport.cli.PerformanceTestCLI'
    classpath = sourceSets.test.runtimeClasspath
    standardInput = System.in
}

tasks.register('performanceTestGM', JavaExec) {
    configure performanceTestConfig
    args 'config/gm.yml', 'RouteEnds', '10'
}

tasks.register('performanceTest', JavaExec) {
    configure performanceTestConfig
    args 'config/local.yml', 'All', '2'
}

// todo gm here so include both sets of data
//tasks.register('queryDueTramStatus', JavaExec) {
//    dependsOn 'classes'
//    mainClass = 'com.tramchester.deployment.cli.QueryLiveDataArchiveCLI'
//    classpath = sourceSets.main.runtimeClasspath
//    args '2023-01-30', '3', '15', 'config/gm.yml', 'dueTramStatus.txt'
//}

// temp additional target while deploying train/tram version to just UAT
//tasks.register('buildDatabaseUAT', JavaExec) {
//    dependsOn classes
//    mainClass = 'com.tramchester.deployment.cli.BuildGraphCLI'
//    classpath = sourceSets.main.runtimeClasspath
//    maxHeapSize = "2g"
//    args 'config/gm.yml', 'build/distributions/database'
//}

// todo re-instate UAT at some stage, database zip's for different config will be needed
tasks.register('buildDatabase', JavaExec) {
    dependsOn 'classes'
    dependsOn 'pullData'
    //dependsOn buildDatabaseUAT
    mainClass = 'com.tramchester.deployment.cli.BuildGraphCLI'
    classpath = sourceSets.main.runtimeClasspath
    args prodConfig //, 'build/distributions/database'
}

// todo gm here so include both sets of data
tasks.register('uploadDataSources', JavaExec) {
    dependsOn 'pullData'
    dependsOn 'classes'
    dependsOn 'buildDatabase'
    mainClass = 'com.tramchester.deployment.cli.UploadSourceDataCLI'
    classpath = sourceSets.main.runtimeClasspath
    args prodConfig, s3prefix
}

// todo gm here so include both sets of data
tasks.register('tidyOldDists', JavaExec) {
    dependsOn 'classes'
    mainClass = 'com.tramchester.deployment.cli.TidyOldDistDataCLI'
    classpath = sourceSets.main.runtimeClasspath
    standardInput = System.in
    args prodConfig, 'dist'
}

distZip {
    dependsOn 'webpack'
}

tasks.shadowJar {
    dependsOn 'distZip'
    archiveClassifier = 'full'
    mergeServiceFiles()
    zip64 true
}

distTar.dependsOn('webpack')

tasks.register('copyIntoUploadDir', Copy) {
    dependsOn 'distZip'
    dependsOn 'classes'
    from 'build/distributions/tramchester-' + buildNumber + '.zip'
    from 'deploy/setupTramWebServerAWSLinux.sh'
    from 'deploy/cloudInitAWSLinux.txt'
    into 'build/distributions/uploadDir'
}

tasks.register('uploadApp', S3Upload) {
    dependsOn 'copyIntoUploadDir'
    keyPrefix = s3prefix
    sourceDir = 'build/distributions/uploadDir'
}

tasks.register('upload') {
    dependsOn 'uploadDataSources'
    dependsOn 'uploadApp'
}

tasks.register('infra') {
    dependsOn 'cfnassist'
    doLast {
        ant.cfnassist(project: 'tramchesterB', env: environment, sns: 'true', capabilityIAM: 'true') {
            Templates(target: 'deploy/infra/' + environment)
        }
    }
}

tasks.register('deploy') {
    dependsOn 'cfnassist'
    doLast {
        ant.cfnassist(project: 'tramchesterB', env: environment, buildNumber: buildNumber, sns: 'true') {
            Templates(target: 'deploy/servers.json')
        }
    }
}

tasks.register('undeploy') {
    dependsOn 'cfnassist'
    doLast {
        ant.cfnassist(project: 'tramchesterB', env: environment, buildNumber: buildNumber, sns: 'true') {
            Delete(target: 'deploy/servers.json')
        }
    }
}

tasks.register('updateLB') {
    dependsOn 'cfnassist'
    doLast {
        ant.cfnassist(project: 'tramchesterB', env: environment, buildNumber: buildNumber, sns: 'true') {
            TargetGroupUpdate(typeTag: 'web', port: '8080',)
        }
    }
}

tasks.register('tidy') {
    dependsOn 'cfnassist'
    doLast {
        ant.cfnassist(project: 'tramchesterB', env: environment) {
            TidyStacks(target: 'deploy/servers.json', typeTag: 'web')
        }
    }
}

//
//tasks.register('allowhost') {
//    dependsOn 'cfnassist'
//    doLast {
//        ant.cfnassist(project: 'tramchesterB', env: environment) {
//            WhiteList(port: '443', tag: 'web')
//        }
//    }
//}
//
//tasks.register('blockhost') {
//    dependsOn 'cfnassist'
//    doLast {
//        ant.cfnassist(project: 'tramchesterB', env: environment) {
//            BlackList(port: '443', tag: 'web')
//        }
//    }
//}
