
plugins {
    id 'com.mgd.core.gradle.s3' version '1.1.4'
    id 'io.mateo.cxf-codegen' version '1.2.1'
    id 'java'
    id 'application'
    id 'idea'
    id 'com.github.johnrengelman.shadow' version '7.1.2'
}

idea{
    module{
        inheritOutputDirs = true
    }
}

import com.mgd.core.gradle.*
import io.mateo.cxf.codegen.wsdl2java.Wsdl2Java

mainClassName = 'com.tramchester.App'

def candidate = System.getenv("CIRCLE_BUILD_NUM") ?: "0"
// override build number if RELEASE_NUMBER set, needed because of way circle ci workflows operate, see also
// .circleci/config.yml
def buildNumber = System.getenv("RELEASE_NUMBER") ?: candidate
def environment = System.getenv("ENV") ?: "Dev"
def isWindows = System.getProperty('os.name').toLowerCase(Locale.ROOT).contains('windows')

def agentPath = '-agentpath:/home/ianc/dev/tools/visualvm_217/visualvm/lib/deployed/jdk16/linux-amd64/libprofilerinterface.so=/home/ianc/dev/tools/visualvm_217/visualvm/lib,5140'

def s3prefix = 'dist/' + buildNumber
def prodConfig = 'config/local.yml'
def railCodeGenOutput = 'main/src/generated-live-rail-api/'
def railLiveDataWSDL = 'config/OpenLDBWS.wsdl'

s3 {
    bucket = 'tramchesternewdist'
}

// this is used in the generated dist zip filename
version = buildNumber

ext {
    dropwizardVersion = '4.0.3'
    awsCdkVersion = '1.201.0'
    jacksonVersion = '2.15.1'
    awsSdkVersion = '2.20.69'
}

repositories {
    maven {
        url "https://repo.osgeo.org/repository/release/"
    }
    mavenCentral()
    maven {
        url "https://raw.github.com/neo4j-contrib/m2/master/releases"
    }
}

// useful reminder ./gradlew -q dependencyInsight --dependency X.Y:Z
dependencies {

    implementation('javax.measure:unit-api:2.1.3')
    implementation("io.dropwizard:dropwizard-core:$dropwizardVersion")
    // slf4j in governator was causing race condition with dropwizard start up code on initial get of logger
    implementation('com.netflix.governator:governator:1.17.12') {
        exclude group: 'org.slf4j', module: 'slf4j-api'
    }
    implementation 'com.google.inject:guice:5.1.0'
    // note: exclude of org.glassfish.jersey.inject needed as it clashed with version in DropWizard causing a
    // failure to load the DynamicServiceLocator in glassfish
    implementation('org.neo4j:neo4j:5.13.0') {
        exclude group:'org.slf4j', module:'slf4j-nop'
        // todo likely need more exclude here, also have : org.neo4j.server.logging.slf4j.SLF4JLogBridge
        exclude group: 'org.glassfish.jersey.inject'   // , module: 'jersey-hk2'}
        exclude group: 'org.glassfish.jersey.containers', module: 'jersey-container-servlet'
        exclude group: 'org.eclipse.jetty' }
    implementation 'com.github.cliftonlabs:json-simple:4.0.1',
            'commons-io:commons-io:2.11.0',
            'org.apache.httpcomponents:httpclient:4.5.14',
            'org.apache.commons:commons-collections4:4.4',
            'com.github.ben-manes.caffeine:caffeine:3.1.5'
    implementation "com.fasterxml.jackson.core:jackson-core:$jacksonVersion",
            "com.fasterxml.jackson.core:jackson-databind:$jacksonVersion",
            "com.fasterxml.jackson.module:jackson-module-afterburner:$jacksonVersion",
            "com.fasterxml.jackson.module:jackson-module-blackbird:$jacksonVersion",
            "com.fasterxml.jackson.dataformat:jackson-dataformat-csv:$jacksonVersion",
            "com.fasterxml.jackson.dataformat:jackson-dataformat-xml:$jacksonVersion"
    implementation('com.smoketurner:dropwizard-swagger:4.0.0-1') {
        exclude group: 'org.glassfish.jersey.containers', module: 'jersey-container-servlet-core'
        exclude group: 'org.glassfish.jersey.core', module: 'jersey-server'
        exclude group: 'org.glassfish.jersey.core', module: 'jersey-common'
    }
    implementation 'org.reflections:reflections:0.10.2'

    // aws sdk
    implementation("software.amazon.awssdk:s3:$awsSdkVersion")
    implementation("software.amazon.awssdk:cloudwatch:$awsSdkVersion")
    implementation("software.amazon.awssdk:cloudformation:$awsSdkVersion")
    // aws cdk
    implementation "software.amazon.awscdk:core:$awsCdkVersion",
            "software.amazon.awscdk:s3:$awsCdkVersion",
            "software.amazon.awscdk:ec2:$awsCdkVersion",
            "software.amazon.awscdk:elasticloadbalancingv2:$awsCdkVersion",
            "software.amazon.awscdk:autoscaling:$awsCdkVersion",
            "software.amazon.awscdk:cdk-cx-api:2.79.1"

    implementation('org.geotools:gt-main:28.1')
    implementation('org.geotools:gt-epsg-hsql:28.1')
    implementation('org.roaringbitmap:RoaringBitmap:0.9.39')

    testImplementation("io.dropwizard:dropwizard-testing:$dropwizardVersion")
    testImplementation 'org.junit.jupiter:junit-jupiter:5.9.2',
            'org.junit.platform:junit-platform-launcher:1.9.2',
            'org.assertj:assertj-core:3.24.2',
            'org.easymock:easymock:5.1.0',
            'org.seleniumhq.selenium:selenium-java:3.141.59',
            'org.hamcrest:hamcrest:2.2'

    // https://ciscoo.github.io/cxf-codegen-gradle/docs/current/user-guide/#dependency-configuration
    cxfCodegen 'jakarta.xml.ws:jakarta.xml.ws-api:2.3.3'
    cxfCodegen 'jakarta.annotation:jakarta.annotation-api:1.3.5'
    cxfCodegen 'ch.qos.logback:logback-classic:1.4.11'

    // for compiling the cxf generated code
    implementation 'com.sun.xml.ws:jaxws-rt:2.3.3'

    // workaround for issues running tests in intellij and glassfish DI, does not occur with running via gradle
    testRuntimeOnly 'javax.servlet:javax.servlet-api:3.0.1'

    // NOTE: get resources files generated by webpack into path for intellij at test time, but this workaround is not working
    //testRuntimeOnly files('build/resources/main/app') // build/resources/main/app => index.html (found)
    //testRuntimeOnly fileTree(dir: 'build/resources/main/', include: '*.*')
}

sourceSets {
    main {
        java {
            srcDirs = ['main/src']
        }
        resources {
            srcDirs = ['main/src/resources','config']
        }
    }
    test {
        java {
            srcDirs = ['main/test']
        }
        resources {
            srcDirs = ['main/test/resources']
        }
    }
}

cxfCodegen {
    cxfVersion = "3.6.1"
}

tasks.register("railLiveDataCodeGen", Wsdl2Java) {
    toolOptions {
        wsdl.set(file(railLiveDataWSDL))
        outputDir.set(file(railCodeGenOutput))
        markGenerated.set(true)
        extendedSoapHeaders.set(true)
    }
}

jar {
    manifest {
        attributes 'Main-Class': 'com.tramchester.App'
    }

}

shadowJar {
    dependsOn 'distZip'
    mergeServiceFiles()
    zip64 true
}


distZip {
    dependsOn 'queryLiveDataArchiveStartScript'
}

processResources {
    // don't want webpack during unit tests etc, move to upload
    //dependsOn 'webpack'
    //exclude('**/app/') // via webpack
    //exclude('build/resources/app/**')
}

tasks.register('npmInstall', Exec) {
    inputs.file("package.json")
    inputs.file("package-lock.json")
    outputs.dir("node_modules")

    if (isWindows) {
        commandLine "npm.cmd", "install"
    } else {
        commandLine "npm", "install"
    }
}

tasks.register('webpack', Exec) {
    dependsOn npmInstall
    inputs.file("package.json")
    inputs.file("package-lock.json")
    inputs.file("webpack.config.js")
    inputs.files(fileTree("main/src/resources/app"))

    if (isWindows) {
        commandLine "./node_modules/.bin/webpack.cmd"
    } else {
        commandLine "./node_modules/.bin/webpack"
    }
}

applicationDistribution.exclude('**/app/')
distZip.dependsOn('webpack')
distTar.dependsOn('webpack')

distributions {
    main {
        contents {
            into ('config') {
                from 'config'
            }
            into ('bin') {
                from 'deploy/start.sh'
            }
        }
    }
}

// WIP removed, problem with runtime classpath for the apache tool that only happened with circleci build env
compileJava.dependsOn railLiveDataCodeGen

tasks.register('cfnassist') {
    doLast {
        ant.taskdef(name: 'cfnassist', classname: 'tw.com.ant.CfnAssistAntTask') {
            classpath {
                fileset(dir: 'lib/cfnassist-1.3.0/lib/', includes: '*.jar')
                dirset(dir: 'lib/cfnassist-1.3.0/conf/')
            }
        }
    }
}

tasks.withType(JavaCompile).configureEach {
    options.deprecation = true
    options.compilerArgs.addAll(['-Xlint'])
}

// TODO Was this still needed?
//tasks.register('stage') { dependsOn['clean', 'installApp'] }

tasks.register('cleanGraph') {
    doLast {
        delete 'databases/integrationBusTest',
                'databases/integrationTramTest',
                'databases/integrationTrainTest',
                'databases/integrationNeighboursTest',
                'databases/neighboursTest',
                'databases/integrationTramTrainGMTest',
                'databases/tramchesterAcceptance.db',
                'databases/all.db',
                'tramchester.db', 'buses.db', 'trains.db', 'all.db', 'rail.db', 'gm_rail.db'
    }
}

clean {
    dependsOn cleanGraph
    delete 'main/src/resources/app/dist/'
    delete fileTree('data/tram') {
        include '*.txt'
        include '*.zip'
        include '*.csv'
    }
    delete fileTree(railCodeGenOutput) {
        include '**.*'
    }
    delete railCodeGenOutput
    delete fileTree('data/bus') {
        include '*.txt'
        include '*.zip'
        include '*.csv'
    }
    delete fileTree('data/rail') {
        include '*.*'
    }
    delete fileTree('data/naptan') {
        include '*.xml'
        include '*.zip'
    }
    delete fileTree('data/nptg') {
        include '*.csv'
        include '*.zip'
    }
    delete fileTree('data/postcodes') {
        include '**/*.csv'
    }
    delete('data/postcodes')
    delete('testData/cache')
}

run {
    // see deploy/setupTramWebServerAWSLinux.sh
    maxHeapSize = '800m'
    dependsOn 'webpack'
    args 'server', prodConfig
}

test {
    useJUnitPlatform()
}

tasks.register('cdkApp', JavaExec) {
    dependsOn classes
    mainClass = 'com.tramchester.deployment.CdkApp'
    classpath = sourceSets.main.runtimeClasspath
}

tasks.register('buses', JavaExec) {
    dependsOn 'webpack'
    mainClass = mainClassName
    classpath = sourceSets.main.runtimeClasspath
    maxHeapSize = "3g"
    args 'server', 'config/buses.yml'
}

tasks.register('frequency', JavaExec) {
    dependsOn 'webpack'
    mainClass = mainClassName
    classpath = sourceSets.main.runtimeClasspath
    maxHeapSize = "3g"
    args 'server', 'config/frequency.yml'
}

tasks.register('rail', JavaExec) {
    dependsOn 'webpack'
    mainClass = mainClassName
    classpath = sourceSets.main.runtimeClasspath
    maxHeapSize = "3g"
    args 'server', 'config/rail.yml'
}

tasks.register('gm', JavaExec) {
    dependsOn 'webpack'
    mainClass = mainClassName
    classpath = sourceSets.main.runtimeClasspath
    maxHeapSize = "2g"
    args 'server', 'config/gm.yml'
}

tasks.register('gmProfile', JavaExec) {
    dependsOn 'webpack'
    mainClass = mainClassName
    classpath = sourceSets.main.runtimeClasspath
    maxHeapSize = "1g"
    jvmArgs agentPath
    args 'server', 'config/gm.yml'
}

tasks.register('all', JavaExec) {
    dependsOn 'webpack'
    mainClass = mainClassName
    classpath = sourceSets.main.runtimeClasspath
    maxHeapSize = "3g"
    args 'server', 'config/all.yml'
}

tasks.register('busTest', Test) {
    useJUnitPlatform {
        includeTags 'BusTest'
    }
}

tasks.register('unit', Test) {
    dependsOn compileJava
    useJUnitPlatform()
    filter {
        includeTestsMatching "com.tramchester.unit.*"
    }
    testLogging {
        exceptionFormat "full" // default is "short"
    }
}

tasks.register('liveMessages', Test) {
    dependsOn compileJava
    useJUnitPlatform {
        includeTags "liveDataMessages"
    }
    filter {
        includeTestsMatching "com.tramchester.integration.*"
    }
    testLogging {
        exceptionFormat "full" // default is "short"
        events "passed", "skipped", "failed", "started", "standardError"
    }
}

def integrationTestConfiguration = {
    minHeapSize = "1000m"
    maxHeapSize = "1750m"
    useJUnitPlatform {
        // excludeTags "liveDataMessages" // these go away periodically...
        //excludeTags "liveData" // also goes away on occasion
        //excludeTags "dataExpiry" // can be useful to exclude when big changes to timetable are upcoming
        //excludeTags 'liveDataDueTrams' // tfgm api has know issue
        excludeTags "postcode" // not needed for tram, but used by buses
        excludeTags "BusTest"
        excludeTags "TrainTest"
        excludeTags "GMTest"
        excludeTags "LiveDataS3UploadTest"
        excludeTags "AWSMetricsTest"
    }
    filter {
        includeTestsMatching "com.tramchester.integration.*"
    }
    testLogging {
        exceptionFormat "full" // default is "short"
        events "passed", "skipped", "failed", "started", "standardError" //, "standardOut"
    }
}

tasks.register('integration', Test) {
    dependsOn compileJava
    configure integrationTestConfiguration
}

tasks.register('integrationProfile', Test) {
    dependsOn compileJava
    configure integrationTestConfiguration
    jvmArgs agentPath
}

tasks.register('integrationGM', Test) {
    dependsOn compileJava
    minHeapSize = "1000m"
    maxHeapSize = "1750m"
    useJUnitPlatform {
        includeTags "GMTest"
        includeTags "dataExpiry"
    }
    filter {
        includeTestsMatching "com.tramchester.integration.*"
    }
    systemProperty("com.tramchester.config", "RailAndTramGreaterManchesterConfig")
    testLogging {
        exceptionFormat "full" // default is "short"
        events "passed", "skipped", "failed", "started", "standardError" //, "standardOut"
    }
}

tasks.register('dualTestIntegration', Test) {
    dependsOn compileJava
    minHeapSize = "1000m"
    maxHeapSize = "1750m"
    useJUnitPlatform {
        includeTags "DualTest"
    }
    filter {
        includeTestsMatching "com.tramchester.integration.*"
    }
    systemProperty("com.tramchester.config", "RailAndTramGreaterManchesterConfig")
    testLogging {
        exceptionFormat "full" // default is "short"
        events "passed", "skipped", "failed", "started", "standardError" //, "standardOut"
    }
}

tasks.register('dataUpdated', Test) {
    dependsOn compileJava
    outputs.upToDateWhen { false }
    minHeapSize = "1000m"
    maxHeapSize = "1750m"
    useJUnitPlatform {
        includeTags "DataUpdateTest"
    }
    filter {
        includeTestsMatching "com.tramchester.integration.*"
    }
    testLogging {
        exceptionFormat "full"
        events "failed"
    }
}

tasks.register('s3Test', Test) {
    dependsOn compileJava
    useJUnitPlatform {
        includeTags "S3Test"
    }
    testLogging {
        exceptionFormat "full" // default is "short"
        events "passed", "skipped", "failed", "started", "standardError" //, "standardOut"
    }
}

tasks.register('integrationBus', Test) {
    dependsOn compileJava
    minHeapSize = "1000m"
    maxHeapSize = "3000m"
    useJUnitPlatform {
        includeTags "BusTest"
        includeTags "postcode"
    }
    filter {
        includeTestsMatching "com.tramchester.integration.*"
    }
    testLogging {
        exceptionFormat "full" // default is "short"
        events "passed", "skipped", "failed", "started", "standardError" //, "standardOut"
    }
}

tasks.register('integrationRail', Test) {
    dependsOn compileJava
    minHeapSize = "1000m"
    maxHeapSize = "8000m"
    useJUnitPlatform {
        includeTags "TrainTest"
    }
    filter {
        includeTestsMatching "com.tramchester.integration.*"
    }
    testLogging {
        exceptionFormat "full" // default is "short"
        events "passed", "skipped", "failed", "started", "standardError" //, "standardOut"
    }
}

tasks.register('integrationRailProfile', Test) {
    dependsOn compileJava
    minHeapSize = "1000m"
    maxHeapSize = "3000m"
    useJUnitPlatform {
        includeTags "TrainTest"
    }
    jvmArgs agentPath
    filter {
        includeTestsMatching "com.tramchester.integration.*"
    }
    testLogging {
        exceptionFormat "full" // default is "short"
        events "passed", "skipped", "failed", "started", "standardError" //, "standardOut"
    }
}

tasks.register('apiTests', Test) {
    dependsOn compileJava
    minHeapSize = "1000m"
    maxHeapSize = "1750m"
    useJUnitPlatform {
        // excludeTags "liveDataMessages" // these go away periodically...
        //excludeTags "liveData" // also goes away on occasion
        //excludeTags "dataExpiry" // can be useful to exclude when big changes to timetable are upcoming
        excludeTags "postcode" // not needed for tram, but used by buses
        excludeTags "BusTest"
        excludeTags "TrainTest"
        excludeTags "GMTest"
    }
    filter {
        includeTestsMatching "com.tramchester.integration.resources.*"
    }
    testLogging {
        exceptionFormat "full" // default is "short"
        events "passed", "skipped", "failed", "started", "standardError" //, "standardOut"
    }
}

tasks.register('graphTests', Test) {
    dependsOn compileJava
    minHeapSize = "1000m"
    maxHeapSize = "1750m"
    useJUnitPlatform()
    filter {
        includeTestsMatching "com.tramchester.integration.graph.*"
    }
    testLogging {
        exceptionFormat "full" // default is "short"
        events "passed", "skipped", "failed", "started", "standardError" //, "standardOut"
    }
}

tasks.register('allStationsTest', Test) {
    dependsOn compileJava
    outputs.upToDateWhen { false }
    minHeapSize = "1000m"
    maxHeapSize = "1750m"
    useJUnitPlatform()
    filter {
        includeTestsMatching "com.tramchester.integration.graph.RouteCalculatorTestAllJourneys"
    }
    testLogging {
        exceptionFormat "full" // default is "short"
        events("passed", "skipped", "failed")
    }
}

tasks.register('buildGraphTest', Test) {
    dependsOn compileJava
    minHeapSize = "1000m"
    maxHeapSize = "1750m"
    useJUnitPlatform()
    filter {
        includeTestsMatching "com.tramchester.integration.graph.GraphBuildAndStartTest"
    }
    testLogging {
        exceptionFormat "full" // default is "short"
        events "passed", "skipped", "failed", "started" //, "standardError", "standardOut"
    }
}

tasks.register('acceptance', Test) {
    dependsOn 'allowhost'
    dependsOn 'compileJava'
    dependsOn 'webpack'
    useJUnitPlatform()
    filter {
        includeTestsMatching "com.tramchester.acceptance.*"
    }
    testLogging {
        exceptionFormat "full" // default is "short"
        events "passed", "skipped", "failed", "started", "standardError", "standardOut"
    }
    finalizedBy {
        blockhost
    }
}

// fast feedback on whether acceptance tests run etc
tasks.register('smokeTest', Test) {
    dependsOn webpack
    dependsOn compileJava
    minHeapSize = "1000m"
    maxHeapSize = "2500m"
    useJUnitPlatform()
    useJUnitPlatform {
        includeTags "SmokeTest"
    }
    filter {
        includeTestsMatching "com.tramchester.acceptance.*"
    }
    testLogging {
        events "passed", "skipped", "failed", "started", "standardError", "standardOut"
    }
}

tasks.register('localAcceptance', Test) {
    dependsOn webpack
    dependsOn compileJava
    minHeapSize = "1000m"
    maxHeapSize = "2500m"
    useJUnitPlatform()
    filter {
        includeTestsMatching "com.tramchester.acceptance.*"
    }
    testLogging {
        events "passed", "skipped", "failed", "started", "standardError", "standardOut"
    }
}

tasks.register('localAcceptanceGeo', Test) {
    dependsOn webpack
    dependsOn compileJava
    minHeapSize = "1000m"
    maxHeapSize = "2500m"
    useJUnitPlatform()
    filter {
        includeTestsMatching "com.tramchester.acceptance.geolocation.*"
    }
    testLogging {
        events "passed", "skipped", "failed", "started", "standardError", "standardOut"
    }
}

tasks.register('diagrams') {
    dependsOn cfnassist
    doLast {
        ant.cfnassist() {
            Diagrams(target: '.')
        }
    }
}

// gm here so include both sets of data
tasks.register('pullData', JavaExec) {
    dependsOn classes
    mainClass = 'com.tramchester.deployment.cli.FetchDataCLI'
    classpath = sourceSets.main.runtimeClasspath
    args 'config/gm.yml'
}

// gm here so include both sets of data
tasks.register('queryDueTramStatus', JavaExec) {
    dependsOn classes
    mainClass = 'com.tramchester.deployment.cli.QueryLiveDataArchiveCLI'
    classpath = sourceSets.main.runtimeClasspath
    args '2023-01-30', '3', '15', 'config/gm.yml', 'dueTramStatus.txt'
}

// temp additional target while deploying train/tram version to just UAT
tasks.register('buildDatabaseUAT', JavaExec) {
    dependsOn classes
    mainClass = 'com.tramchester.deployment.cli.BuildGraphCLI'
    classpath = sourceSets.main.runtimeClasspath
    maxHeapSize = "2g"
    args 'config/gm.yml', 'build/distributions/database'
}

tasks.register('buildDatabase', JavaExec) {
    dependsOn classes
    dependsOn buildDatabaseUAT
    mainClass = 'com.tramchester.deployment.cli.BuildGraphCLI'
    classpath = sourceSets.main.runtimeClasspath
    args prodConfig, 'build/distributions/database'
}

tasks.register('zipDB', Zip) {
    dependsOn buildDatabase
    from 'build/distributions/database'
    include '*.db/**'
    archiveFileName = 'database.zip'
}

// gm here so include both sets of data
tasks.register('uploadDataSources', JavaExec) {
    dependsOn pullData
    dependsOn classes
    mainClass = 'com.tramchester.deployment.cli.UploadSourceDataCLI'
    classpath = sourceSets.main.runtimeClasspath
    args 'config/gm.yml', s3prefix
}

tasks.register('copyIntoUploadDir', Copy) {
    dependsOn zipDB
    dependsOn distZip
    from 'build/distributions/database.zip'
    from 'build/distributions/tramchester-' + buildNumber + '.zip'
    from 'deploy/setupTramWebServerAWSLinux.sh'
    from 'deploy/cloudInitAWSLinux.txt'
    into 'build/distributions/uploadDir'
}

tasks.register('uploadApp', S3Upload) {
    dependsOn copyIntoUploadDir
    keyPrefix = s3prefix
    sourceDir = 'build/distributions/uploadDir'
}

tasks.register('upload') {
    dependsOn uploadDataSources
    dependsOn uploadApp
}

tasks.register('queryLiveDataArchiveStartScript', CreateStartScripts) {
    dependsOn compileJava
    classpath = startScripts.classpath
    outputDir = startScripts.outputDir
    mainClass = 'com.tramchester.deployment.cli.QueryLiveDataArchiveCLI'
    applicationName = 'queryLiveData'
}

// >>>>> https://data.atoc.org/member-area

tasks.register('uploadRailToS3', S3Upload) {
    key = 'railData/ttis697.zip'
    file = 'data/rail/ttis697.zip'
    overwrite = false
}

tasks.register('infra') {
    dependsOn cfnassist
    doLast {
        ant.cfnassist(project: 'tramchesterB', env: environment, sns: 'true', capabilityIAM: 'true') {
            Templates(target: 'deploy/infra/' + environment)
        }
    }
}

tasks.register('deploy') {
    dependsOn cfnassist
    doLast {
        ant.cfnassist(project: 'tramchesterB', env: environment, buildNumber: buildNumber, sns: 'true') {
            Templates(target: 'deploy/servers.json')
        }
    }
}

tasks.register('undeploy') {
    dependsOn cfnassist
    doLast {
        ant.cfnassist(project: 'tramchesterB', env: environment, buildNumber: buildNumber, sns: 'true') {
            Delete(target: 'deploy/servers.json')
        }
    }
}

tasks.register('deployCDK', Exec) {
    dependsOn npmInstall
    dependsOn classes
    commandLine "./node_modules/.bin/cdk", "deploy"
}

tasks.register('updateLB') {
    dependsOn cfnassist
    doLast {
        ant.cfnassist(project: 'tramchesterB', env: environment, buildNumber: buildNumber, sns: 'true') {
            TargetGroupUpdate(typeTag: 'web', port: '8080',)
        }
    }
}

tasks.register('tidy') {
    dependsOn cfnassist
    doLast {
        ant.cfnassist(project: 'tramchesterB', env: environment) {
            TidyStacks(target: 'deploy/servers.json', typeTag: 'web')
        }
    }
}

tasks.register('allowHostDev') {
    dependsOn cfnassist
    doLast {
        ant.cfnassist(project: 'tramchesterB', env: 'Dev') {
            WhiteList(port: '443', tag: 'web')
        }
    }
}

tasks.register('blockHostDev') {
    dependsOn cfnassist
    doLast {
        ant.cfnassist(project: 'tramchesterB', env: 'Dev') {
            BlackList(port: '443', tag: 'web')
        }
    }
}

tasks.register('allowHostUAT') {
    dependsOn cfnassist
    doLast {
        ant.cfnassist(project: 'tramchesterB', env: 'UAT') {
            WhiteList(port: '443', tag: 'web')
        }
    }
}

tasks.register('denyHostUAT') {
    dependsOn cfnassist
    doLast {
        ant.cfnassist(project: 'tramchesterB', env: 'UAT') {
            BlackList(port: '443', tag: 'web')
        }
    }
}

tasks.register('allowhost') {
    dependsOn cfnassist
    doLast {
        ant.cfnassist(project: 'tramchesterB', env: environment) {
            WhiteList(port: '443', tag: 'web')
        }
    }
}

tasks.register('blockhost') {
    dependsOn cfnassist
    doLast {
        ant.cfnassist(project: 'tramchesterB', env: environment) {
            BlackList(port: '443', tag: 'web')
        }
    }
}
